{"version":3,"sources":["Menu.js","Login.js","JobList.js","lib/AnsiColors.js","ServerLog.js","lib/EditableTable.js","StreamingSql.js","StreamingEtl.js","ConnectorList.js","ConnectorManager.js","App.js","index.js"],"names":["Sider","Layout","SubMenu","Menu","SideMenu","state","collapsed","onCollapse","console","log","_this","setState","render","react_default","a","createElement","collapsible","className","style","color","width","textAlign","fontSize","margin","menu","theme","defaultSelectedKeys","mode","Item","key","Link","to","icon","type","title","onClick","props","logout","React","Component","Login","this","afterLogin","getFieldDecorator","form","es_form","onSubmit","e","preventDefault","validateFields","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","err","values","result","wrap","_context","prev","next","fetch","method","body","JSON","stringify","headers","content-type","sent","json","userName","concat","user","stop","_x","_x2","apply","arguments","rules","required","message","input","prefix","placeholder","valuePropName","initialValue","es_checkbox","href","es_button","htmlType","WrappedNormalLoginForm","Form","create","name","JobList","deploys","jobList","columns","dataIndex","runId","record","index","status","setJobListItem","item","assign","jobId","intervalId","setInterval","fetchData","clearInterval","defineProperty","objectSpread","tag","length","window","open","appUrl","text","DeployBtn","popconfirm","onConfirm","handleDeployOrStop","okText","cancelText","placement","StopBtn","divider","toLink","history","push","pathname","openNotificationWithIcon","description","notification","duration","loadjobs","data","visible","modal","onOk","jobName","refs","create_new_job_id","value","onCancel","ref","table","bordered","pagination","dataSource","rowKey","path","success","error_code","action","AnsiColors","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","regexp","symbolList","match","splitList","split","colorMap","\u001b[30m","\u001b[31m","\u001b[32m","\u001b[33m","\u001b[34m","\u001b[35m","\u001b[36m","\u001b[37m","\u001b[39m","\u001b[m","renderList","row","i","marginBottom","overflow","ServerLog","arrLogs","last_num","id","height","map","AnsiColors_AnsiColors","val","stickToBottom","logs","time","Date","getTime","num","shift","log1","scroll_con","scrollTop","scrollHeight","clientHeight","url","prems","Math","random","showlog","t0","_this2","EditableContext","createContext","EditableFormRow","objectWithoutProperties","Provider","EditableCell","_getPrototypeOf2","_len","args","Array","_key","call","editing","toggleEdit","focus","save","_this$props","handleSave","error","currentTarget","renderCell","_this$props2","children","node","onPressEnter","onBlur","paddingRight","_this$props3","editable","restProps","Consumer","StreamingSql","context","engine","query","config","editConfig","showErrorMessage","saveing","showDrawer","Option","Select","onClose","components","cell","col","onCell","es_alert","showIcon","closable","getErrorMessage","es_row","es_col","span","padding","es_select","defaultValue","onSelect","jobSave","saveingIcon","react_codemirror2","min-height","options","lineNumbers","extraKeys","Ctrl","onChange","editor","drawer","scroll","y","pageSize","keys","position","left","bottom","borderTop","background","marginRight","params","undefined","location","queryText","jobType","parse","fetchGetData","graph","target","ConnectorList","connectors","expandedRowRender","_concat","toConsumableArray","ConnectorManager","loading","connector","reloadConnectors","bind","assertThisInitialized","loadingIcon","drivers","x","Content","App","login","layout","minHeight","Menu_SideMenu","Route","exact","component","StreamingEtl","password","Modal","confirm","content","_onOk","_callee2","_context2","ReactDOM","HashRouter","document","getElementById"],"mappings":"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","file":"static/js/main.00e0b37a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Layout, Menu, Icon } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nexport default class SideMenu extends React.Component {\r\n  state = {\r\n    collapsed: false\r\n  };\r\n\r\n  onCollapse = collapsed => {\r\n    console.log(collapsed);\r\n    this.setState({ collapsed });\r\n  };\r\n\r\n  render = () => (\r\n    <Sider\r\n      collapsible\r\n      collapsed={this.state.collapsed}\r\n      onCollapse={this.onCollapse}\r\n    >\r\n      <div\r\n        className=\"logo\"\r\n        style={{\r\n          color: \"white\",\r\n          width: \"100%\",\r\n          textAlign: \"center\",\r\n          fontSize: \"20px\",\r\n          margin: \"15px 0\"\r\n        }}\r\n      >\r\n        Sylph\r\n      </div>\r\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n        <Menu.Item key=\"1\">\r\n          <Link to=\"/joblist\">\r\n            <Icon type=\"tool\" />\r\n            JobManager\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <SubMenu\r\n          key=\"2\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"tool\" />\r\n              <span>Connector</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item key=\"2\">\r\n            <Link to=\"/connectors\">\r\n              <Icon type=\"tool\" />\r\n              Connectors\r\n          </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\">\r\n            <Link to=\"/connector_manager\">\r\n              <Icon type=\"tool\" />\r\n              Manager\r\n          </Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n\r\n        <Menu.Item key=\"5\">\r\n          <Link to=\"/serverLogs\">\r\n            <Icon type=\"tool\" />\r\n            ServerLogs\r\n          </Link>\r\n        </Menu.Item>\r\n        <SubMenu\r\n          key=\"sub1\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"user\" />\r\n              <span>User</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item key=\"7\">\r\n            <span onClick={this.props.logout}>\r\n              <Icon type=\"tool\" />\r\n              Logout\r\n            </span>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\r\n\r\nclass Login extends React.Component {\r\n    render() {\r\n        let { afterLogin } = this.props;\r\n        const handleSubmit = e => {\r\n            e.preventDefault();\r\n            this.props.form.validateFields(async (err, values) => {\r\n                if (!err) {\r\n                    console.log('Received values of form: ', values);\r\n                }\r\n                let result = await fetch(\"/_sys/auth/login\", {\r\n                    method: \"POST\",\r\n                    body: JSON.stringify(values),\r\n                    headers: {\r\n                        \"content-type\": \"application/json\"\r\n                    }\r\n                });\r\n                result = await result.json();\r\n                if (result.userName === values.userName) {\r\n                    console.log(`${values.user} login ok`)\r\n                    afterLogin(result.userName)\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={handleSubmit} style={{ width: \"25vw\", margin: \"10vh auto 0 auto\" }}>\r\n                <Form.Item>\r\n                    {getFieldDecorator('userName', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            placeholder=\"Username\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{ required: true, message: 'Please input your Password!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <div>\r\n                        {getFieldDecorator('remember', {\r\n                            valuePropName: 'checked',\r\n                            initialValue: true,\r\n                        })(<Checkbox>Remember me</Checkbox>)}\r\n                        <a className=\"login-form-forgot\" href=\"\">\r\n                            Forgot password\r\n                    </a>\r\n                    </div>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                    Or <a href=\"\">register now!</a>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(Login);","import React from \"react\";\r\nimport { Table, Modal, notification, Tag, Divider, Button, Popconfirm, Icon, Input } from \"antd\";\r\n\r\nexport default class JobList extends React.Component {\r\n  deploys = {}\r\n\r\n  state = {\r\n    jobList: [],\r\n\r\n    columns: [\r\n      {\r\n        title: \"Job\",\r\n        dataIndex: \"jobName\",\r\n        key: 'jobName',\r\n      },\r\n      {\r\n        title: \"runId\",\r\n        dataIndex: \"runId\",\r\n        key: 'runId',\r\n        width: 200,\r\n        render: (runId, record, index) => {\r\n          if (record.status === 'DEPLOYING') {\r\n            let setJobListItem = (item) => Object.assign([], this.state.jobList, item);\r\n            if (!this.deploys[record.jobId]) {\r\n              var intervalId = setInterval(async () => {\r\n                var result = await this.fetchData(`/job/${record.jobId}`)\r\n\r\n                if (result.status !== \"DEPLOYING\") {\r\n                  clearInterval(this.deploys[record.jobId])\r\n                  this.setState({ jobList: setJobListItem({ [index]: { ...result } }) });\r\n                  delete this.deploys[record.jobId]\r\n                } else {\r\n                  this.setState({ jobList: setJobListItem({ [index]: { ...result } }) });\r\n                }\r\n              }, 1000)\r\n              this.deploys[record.jobId] = intervalId;\r\n            }\r\n\r\n            return (\r\n              <Tag color={\"blue\"} key={runId}>\r\n                <Icon type=\"loading\" />\r\n                &nbsp;&nbsp;processing...\r\n              </Tag>\r\n            );\r\n          }\r\n\r\n          if (runId && runId.length > 0) {\r\n            return (\r\n              <Tag color={\"blue\"} key={runId} onClick={() => window.open(record.appUrl)}>\r\n                {runId}\r\n              </Tag>\r\n            );\r\n          }\r\n          return <Tag color={\"red\"}>{\"暂无\"}</Tag>;\r\n        }\r\n      },\r\n      {\r\n        title: \"type\",\r\n        dataIndex: \"type\",\r\n        key: 'type',\r\n      },\r\n      {\r\n        title: \"status\",\r\n        dataIndex: \"status\",\r\n        key: 'status',\r\n      },\r\n      {\r\n        title: \"Action\",\r\n        key: \"action\",\r\n        render: (text, record, index) => {\r\n          let DeployBtn = (\r\n            <Popconfirm\r\n              title=\"Are you sure deploy this job?\"\r\n              onConfirm={() =>\r\n                this.handleDeployOrStop('deploy', record.jobId)\r\n              }\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n              placement=\"left\"\r\n            >\r\n              <a href=\"/#\">Deploy</a>\r\n            </Popconfirm >\r\n          );\r\n          let StopBtn = (\r\n            <Popconfirm\r\n              title=\"Are you sure stop this job?\"\r\n              onConfirm={() => {\r\n                this.handleDeployOrStop('stop', record.jobId);\r\n              }}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n              placement=\"left\"\r\n            >\r\n              <a href=\"/#\">Stop</a>\r\n            </Popconfirm>\r\n          );\r\n          return (\r\n            <span>\r\n              {record.status === \"STOP\" ? DeployBtn : StopBtn}\r\n              < Divider type=\"vertical\" />\r\n\r\n              <Popconfirm\r\n                title=\"Are you sure Delete this job?\"\r\n                onConfirm={() => {\r\n                  this.handleDeployOrStop('delete', record.jobId);\r\n                }}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n                placement=\"left\"\r\n              >\r\n                <a href=\"/#\" style={{ color: \"red\" }}>Delete</a>\r\n              </Popconfirm>\r\n              <Divider type=\"vertical\" />\r\n              <a onClick={() => {\r\n                var toLink;\r\n                var type = record.type;\r\n                if (type === 'StreamSql' || type === 'FlinkMainClass' || type === 'StructuredStreamingSql' || type === 'SparkStreamingSql') {\r\n                  toLink = `/streamingSql/${record.jobId}`;\r\n                } else {\r\n                  toLink = `/streamingEtl/${record.jobId}`;\r\n                }\r\n                this.props.history.push({ pathname: toLink, state: {} });\r\n              }}>Edit</a>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  openNotificationWithIcon = (type, message, description) => {\r\n    notification[type]({\r\n      message: message,\r\n      description: description,\r\n      duration: 6\r\n    });\r\n  };\r\n\r\n  async fetchData(path) {\r\n    let result = await fetch(`/_sys/job_manger${path}`, { method: \"GET\" });\r\n    result = await result.json();\r\n\r\n    if (result.success === false) {\r\n      this.openNotificationWithIcon('error', result.error_code, result.message)\r\n      return;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async handleDeployOrStop(action, jobId) {\r\n    await this.fetchData(`/${action}/${jobId}`);\r\n    await this.loadjobs();\r\n  }\r\n\r\n  async loadjobs() {\r\n    var result = await this.fetchData(\"/jobs\");\r\n    result && this.setState({ jobList: result });\r\n  }\r\n\r\n\r\n\r\n  componentWillMount() {\r\n    this.loadjobs();\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        <div style={{ textAlign: \"right\", margin: \"20px 10px\" }}>\r\n          <Button\r\n            type=\"primary\"\r\n            icon=\"reload\"\r\n            onClick={() => this.loadjobs()}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          <Button style={{ margin: \"0 10px\" }} type=\"primary\" icon=\"folder-add\" onClick={() => {\r\n            this.props.history.push(\"/streamingEtl\", { data: {} });\r\n          }}>\r\n            Create_ETL\r\n          </Button>\r\n          <Button type=\"primary\" icon=\"folder-add\" onClick={() => this.setState({ visible: true })}>\r\n            Create_StreamSQL\r\n          </Button>\r\n          <Modal\r\n            title=\"Create New StreamSQL\"\r\n            visible={this.state.visible}\r\n            onOk={() => {\r\n              this.setState({ visible: false });\r\n              var jobName = this.refs.create_new_job_id.state.value\r\n              this.props.history.push({\r\n                pathname: `/streamingSql`,\r\n                state: { jobName: jobName, create: true }\r\n              });\r\n            }}\r\n            onCancel={() => { this.setState({ visible: false }); }}\r\n          >\r\n            JobId: <Input placeholder=\"please enter job id\" ref=\"create_new_job_id\"></Input>\r\n          </Modal>\r\n        </div>\r\n        <Table\r\n          bordered\r\n          pagination={false}\r\n          dataSource={this.state.jobList}\r\n          columns={this.state.columns}\r\n          rowKey={\"jobId\"}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","\r\nimport React from 'react';\r\n\r\nexport class AnsiColors extends React.Component {\r\n    render() {\r\n        let { log } = this.props;\r\n        let regexp = /\\\u001b\\[\\d*m/g;\r\n        let symbolList = log.match(regexp);\r\n        let splitList = log.split(regexp);\r\n        let colorMap = {\r\n            '\u001b[30m': \"black\",\r\n            '\u001b[31m': \"red\",\r\n            '\u001b[32m': \"green\",\r\n            '\u001b[33m': \"#dab633\",   //\"yellow\",\r\n            '\u001b[34m': \"blue\",\r\n            '\u001b[35m': \"magenta\",\r\n            '\u001b[36m': \"cyan\",\r\n            '\u001b[37m': \"white\",\r\n            '\u001b[39m': \"default\",\r\n            '\u001b[m': \"black\"\r\n        }\r\n        let renderList = [];\r\n        let row = []\r\n        for (let i = 0; i < splitList.length; i++) {\r\n            if (i === 0) {\r\n                row.push(<span style={{ color: 'black' }}>{splitList[i]}</span>)\r\n                continue;\r\n            }\r\n            row.push(<span style={{ color: colorMap[symbolList[i - 1]] }}>{splitList[i]}</span>)\r\n        }\r\n        renderList.push(<pre style={{ marginBottom: '0em', overflow: 'visible' }}>{row}</pre>);\r\n\r\n        return (\r\n            <div >\r\n                {renderList}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { AnsiColors } from \"./lib/AnsiColors\";\r\n\r\nexport default class ServerLog extends React.Component {\r\n    state = {\r\n        arrLogs: [],\r\n        last_num: -1,\r\n        id: null,\r\n        intervalId: null\r\n    };\r\n    showlog(json) {\r\n        var stickToBottom = true;\r\n        if (json !== \"\" && json !== null) {\r\n            if (json.logs === null || json.logs.length === 0) {\r\n                return\r\n            }\r\n\r\n            var time = new Date().getTime();\r\n            for (let num in json.logs) {\r\n                if (this.state.arrLogs.length > 1000) {\r\n                    this.state.arrLogs.shift()  //删除第一个元素\r\n                }\r\n                this.state.arrLogs.push({ key: time + \"_\" + num, val: json.logs[num] })\r\n            }\r\n\r\n            let log1 = this.refs.scroll_con;\r\n            if (log1.scrollTop < log1.scrollHeight - log1.clientHeight - 1) {\r\n                stickToBottom = false\r\n                return;\r\n            }\r\n            this.setState({ id: json.id, last_num: json.next, arrLogs: this.state.arrLogs });\r\n            if (stickToBottom) {\r\n                //log1.scrollTo(0, log1.scrollHeight)\r\n                log1.scrollTop = log1.scrollHeight;  //滚动条在最下面\r\n            }\r\n        }\r\n    }\r\n\r\n    async fetchData(url, prems) {\r\n        url = url + \"?rd=\" + Math.random();\r\n        for (var i in prems) {\r\n            url += \"&\" + i + \"=\" + prems[i];\r\n        }\r\n\r\n        let result = await fetch(url, { method: \"GET\" });\r\n        try {\r\n            result = await result.json();\r\n            this.showlog(result)\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        var intervalId = setInterval(() => {\r\n            this.fetchData(\"/_sys/server/logs\", {\r\n                last_num: this.state.last_num,\r\n                id: this.state.id\r\n            })\r\n        }, 1000)\r\n        this.setState({ intervalId: intervalId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(`Clearing ShowLogs Interval ${this.state.intervalId}`)\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div style={{ height: \"95vh\", overflow: \"scroll\" }} ref=\"scroll_con\">\r\n                {\r\n                    this.state.arrLogs.map(log => {\r\n                        return <AnsiColors log={log.val} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}","\r\nimport React from 'react';\r\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\r\n\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n    <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n    </EditableContext.Provider>\r\n);\r\n\r\nexport const EditableFormRow = Form.create()(EditableRow);\r\n\r\nexport class EditableCell extends React.Component {\r\n    state = {\r\n        editing: false,\r\n    };\r\n\r\n    toggleEdit = () => {\r\n        const editing = !this.state.editing;\r\n        this.setState({ editing }, () => {\r\n            if (editing) {\r\n                this.input.focus();\r\n            }\r\n        });\r\n    };\r\n\r\n    save = e => {\r\n        const { record, handleSave } = this.props;\r\n        this.form.validateFields((error, values) => {\r\n            if (error && error[e.currentTarget.id]) {\r\n                return;\r\n            }\r\n            this.toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        });\r\n    };\r\n\r\n    renderCell = form => {\r\n        this.form = form;\r\n        const { children, dataIndex, record, title } = this.props;\r\n        const { editing } = this.state;\r\n        return editing ? (\r\n            <Form.Item style={{ margin: 0 }}>\r\n                {form.getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: `${title} is required.`,\r\n                        },\r\n                    ],\r\n                    initialValue: record[dataIndex],\r\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{ paddingRight: 24 }}\r\n                    onClick={this.toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            editable,\r\n            dataIndex,\r\n            title,\r\n            record,\r\n            index,\r\n            handleSave,\r\n            children,\r\n            ...restProps\r\n        } = this.props;\r\n        return (\r\n            <td {...restProps}>\r\n                {editable ? (\r\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\r\n                ) : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n    }\r\n}\r\n\r\nexport class EditableTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let { dataSource } = this.props;\r\n        dataSource = JSON.parse(dataSource);\r\n        dataSource = Object.keys(dataSource).map(key => {\r\n            let value = dataSource[key];\r\n            return { key: key, value: value, description: \"\" };\r\n        });\r\n\r\n        this.columns = [\r\n            {\r\n                title: 'key',\r\n                dataIndex: 'key',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'value',\r\n                dataIndex: 'value',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'operation',\r\n                dataIndex: 'operation',\r\n                render: (text, record) =>\r\n                    this.state.dataSource.length >= 1 ? (\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n                            <a href=\"javascript:;\">Delete</a>\r\n                        </Popconfirm>\r\n                    ) : null,\r\n            },\r\n        ];\r\n\r\n        this.state = {\r\n            dataSource: dataSource,\r\n            count: dataSource.length,\r\n        };\r\n    }\r\n\r\n    handleDelete = key => {\r\n        const dataSource = [...this.state.dataSource];\r\n        this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\r\n    };\r\n\r\n    handleAdd = () => {\r\n        const { count, dataSource } = this.state;\r\n        const newData = {\r\n            key: count,\r\n            value: `Edward King ${count}`,\r\n        };\r\n        this.setState({\r\n            dataSource: [...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n    };\r\n\r\n    handleSave = row => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex(item => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n            ...item,\r\n            ...row,\r\n        });\r\n        this.setState({ dataSource: newData });\r\n    };\r\n\r\n    render() {\r\n        const components = {\r\n            body: {\r\n                row: EditableFormRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <div style={{ paddingRight: \"20px\" }}>\r\n                <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\r\n                    Add a row\r\n                </Button>\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={this.state.dataSource}\r\n                    columns={columns}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Drawer, Table, notification, Input, Select, Tag, Alert, Button, Icon, Row, Col } from \"antd\";\r\nimport { message } from 'antd';\r\nimport { EditableCell, EditableFormRow } from './lib/EditableTable';\r\nimport { UnControlled as CodeMirror } from 'react-codemirror2'\r\nimport 'codemirror/lib/codemirror.css';\r\nimport \"./codeMirror.css\";\r\nimport 'codemirror/mode/sql/sql';\r\nimport 'codemirror/theme/neo.css';\r\n\r\n\r\nexport default class StreamingSql extends React.Component {\r\n    state = {\r\n        create: false,\r\n        jobId: null,\r\n        jobName: null,\r\n        engine: \"StreamSql\",\r\n        query: \"create input table xxx()\",\r\n        config: {},\r\n        editConfig: {},\r\n        showErrorMessage: \"\",\r\n        visible: false,\r\n        saveing: false\r\n    };\r\n\r\n    columns = [\r\n        {\r\n            title: 'key',\r\n            dataIndex: 'key'\r\n        },\r\n        {\r\n            title: 'value',\r\n            dataIndex: 'value',\r\n            editable: true\r\n        },\r\n    ];\r\n\r\n    showDrawer = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    constructor(props, context) {\r\n        super()\r\n\r\n        this.state.jobId = props.match.params.jobId;\r\n        if (props.location.state !== undefined) {\r\n            this.state.jobName = props.location.state.jobName;\r\n        }\r\n        this.state.create = this.state.jobName !== undefined && this.state.jobName !== null;\r\n    }\r\n\r\n    async fetchGetData(url) {\r\n        let result = await fetch(url, { method: \"GET\" });\r\n        result = await result.json();\r\n        this.setState({ jobName: result.jobName, query: result.queryText, jobType: result.type, config: JSON.parse(result.config), editConfig: JSON.parse(result.config) })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.state.jobId !== undefined && !this.state.create) {\r\n            this.fetchGetData(`/_sys/job_manger/job/${this.state.jobId}`)\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message, description) => {\r\n        notification[type]({\r\n            message: message,\r\n            description: description,\r\n            duration: 6\r\n        });\r\n    };\r\n\r\n    async jobSave() {\r\n        this.setState({ saveing: true });\r\n        let result = await fetch(\"/_sys/job_manger/save\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: this.state.jobId,\r\n                jobName: this.state.jobName,\r\n                queryText: this.state.query,\r\n                type: this.state.engine,\r\n                config: JSON.stringify(this.state.config)\r\n            }),\r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            }\r\n        });\r\n        try {\r\n            result = await result.json();\r\n            if (result.success === false) {\r\n                this.setState({ showErrorMessage: result.message })\r\n                return;\r\n            }\r\n            message.success(`Save job ${this.state.jobName} success`, 5);\r\n        } finally {\r\n            this.setState({ saveing: false });\r\n        }\r\n    }\r\n\r\n\r\n    render = () => {\r\n        const { Option } = Select;\r\n\r\n        const onClose = () => {\r\n            this.setState({ showErrorMessage: '' })\r\n        };\r\n\r\n        const getErrorMessage = () => {\r\n            if (!this.state.showErrorMessage) return;\r\n            return (\r\n                <Alert\r\n                    message={\"Error\"}\r\n                    description={<pre>{this.state.showErrorMessage}</pre>}\r\n                    type={\"error\"}\r\n                    showIcon\r\n                    closable\r\n                    onClose={onClose}\r\n                />\r\n            )\r\n        }\r\n\r\n        const saveingIcon = () => {\r\n            if (!this.state.saveing) {\r\n                return;\r\n            }\r\n            return (<Icon type=\"loading\" />)\r\n        }\r\n\r\n        const components = {\r\n            body: {\r\n                row: EditableFormRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: (e) => {\r\n                        this.state.editConfig[e.key] = e.value\r\n                        this.setState({ editConfig: this.state.editConfig })\r\n                    },\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <div>\r\n                {getErrorMessage()}\r\n                <Row style={{ margin: \"10px\" }}>\r\n                    <Col span={4} >\r\n                        <Tag style={{ fontSize: \"16px\", padding: \"5px 25px\" }} color=\"blue\">Job: {this.state.jobName}</Tag>\r\n                    </Col>\r\n                    <Col span={20} style={{ textAlign: 'right' }}>\r\n                        <Select style={{ margin: \"0 10px\" }} defaultValue=\"StreamSql\" onSelect={(e) => { this.setState({ engine: e }) }}>\r\n                            <Option value=\"StreamSql\">FlinkStreamSql</Option>\r\n                            <Option value=\"SparkStreamingSql\">SparkStreamingSql</Option>\r\n                            <Option value=\"StructuredStreamingSql\">StructuredStreamingSql</Option>\r\n                        </Select>\r\n                        <Button type=\"primary\" icon=\"setting\" onClick={this.showDrawer}>Setting</Button>\r\n                        <Button style={{ margin: \"0 10px\" }} type=\"primary\" icon=\"file\" >Files</Button>\r\n                        <Button type=\"primary\" icon=\"save\" onClick={() => this.jobSave()}>Save{saveingIcon()}</Button>\r\n                    </Col>\r\n                </Row>\r\n                <CodeMirror\r\n                    value={this.state.query}\r\n                    style={{\r\n                        \"min-height\": \"100%\",\r\n                        height: \"auto\"\r\n                    }}\r\n                    options={{\r\n                        lineNumbers: true,                     //显示行号  \r\n                        mode: { name: \"text/x-sql\" },          //定义mode  \r\n                        extraKeys: { \"Ctrl\": \"autocomplete\" },   //自动提示配置  \r\n                        theme: \"neo\"        //material or ambiance         //选中的theme  \r\n                    }}\r\n                    onChange={(editor, data, value) => {\r\n                        this.state.query = value;\r\n                    }}\r\n                />\r\n                <div>\r\n                    <Drawer\r\n                        title=\"Setting job config\"\r\n                        width={\"50%\"}\r\n                        onClose={this.onClose}\r\n                        visible={this.state.visible}\r\n\r\n                    >\r\n                        {/* <EditableTable dataSource={this.state.config}></EditableTable> */}\r\n                        <p>basic configuration:</p>\r\n                        <Table components={components} scroll={{ y: 420 }} pagination={{ pageSize: 50 }} dataSource={(() => {\r\n                            let map = this.state.editConfig\r\n                            return Object.keys(map).map(key => { return { key: key, value: map[key], description: \"\" } });\r\n                        })()\r\n                        } columns={columns} />\r\n                        <div\r\n                            style={{\r\n                                position: 'absolute',\r\n                                left: 0,\r\n                                bottom: 0,\r\n                                width: '100%',\r\n                                borderTop: '1px solid #e9e9e9',\r\n                                padding: '10px 16px',\r\n                                background: '#fff',\r\n                                textAlign: 'right',\r\n                            }}\r\n                        >\r\n                            <Button onClick={() => {\r\n                                this.setState({\r\n                                    visible: false,\r\n                                    editConfig: this.state.config\r\n                                });\r\n                            }} style={{ marginRight: 8 }}>Cancel</Button>\r\n                            <Button onClick={() => {\r\n                                this.setState({\r\n                                    visible: false,\r\n                                    config: this.state.editConfig\r\n                                });\r\n                            }} type=\"primary\">Save</Button>\r\n                        </div>\r\n                    </Drawer>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}","import React from \"react\";\r\n\r\nexport default class StreamingSql extends React.Component {\r\n    state = {\r\n        jobId: null,\r\n        graph: \"\"\r\n    };\r\n    constructor(props, context) {\r\n        super()\r\n        console.log(props)\r\n        this.state.jobId = props.location.state.data.jobId\r\n    }\r\n\r\n    async fetchGetData(url, prems) {\r\n        url = url + \"?rd=\" + Math.random();\r\n        for (var i in prems) {\r\n            url += \"&\" + i + \"=\" + prems[i];\r\n        }\r\n\r\n        let result = await fetch(url, { method: \"GET\" });\r\n        result = await result.json();\r\n        this.setState({ graph: result.query, jobType: result.jobType, config: result.config })\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.state.jobId !== undefined) {\r\n            this.fetchGetData(\"/_sys/etl_builder/get\", { jobId: this.state.jobId })\r\n        }\r\n    }\r\n\r\n    onEditChange(e) {\r\n        this.setState({ query: e.target.value })\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                etl job: {this.state.jobId}\r\n                <p>not support</p>\r\n                <div id={\"actuators_select\"}></div>\r\n                <div id={\"control-panel\"}></div>\r\n                <div id={\"flow_modal\"}></div>\r\n                <div id={\"flow-panel\"} style={{ height: \"95vh\", width: \"100px\" }}></div>\r\n            </div>\r\n        );\r\n    };\r\n}","import React from \"react\";\r\nimport { Table, Tag } from \"antd\";\r\n\r\nexport default class ConnectorList extends React.Component {\r\n    state = {\r\n        connectors: []\r\n    };\r\n\r\n    columns = [\r\n        {\r\n            title: 'connector',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (name, record) => {\r\n                return (<Tag key={name} onClick={() => {\r\n                    debugger\r\n                }}>{name}</Tag>)\r\n            }\r\n        },\r\n        {\r\n            title: 'driver',\r\n            dataIndex: 'driver',\r\n            key: 'driver',\r\n        },\r\n        {\r\n            title: 'type',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            render: (type, record) => {\r\n                return <Tag color={\"blue\"} key={type}>{type}</Tag>\r\n            }\r\n        },\r\n        {\r\n            title: 'realTime',\r\n            dataIndex: 'realTime',\r\n            key: 'realTime'\r\n        }\r\n    ];\r\n\r\n\r\n    async fetchData() {\r\n        let result = await fetch(\"/_sys/plugin/list_connectors\", {\r\n            method: \"GET\"\r\n        });\r\n\r\n        result = await result.json();\r\n        if (Object.values(result).length === 0) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            connectors: [].concat.call(...(Object.values(result)))\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchData()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <Table dataSource={this.state.connectors} columns={this.columns} expandedRowRender={record => {\r\n                    debugger;\r\n                    return (<p style={{ margin: 0 }}>{JSON.stringify(record.config)}</p>);\r\n                }} />\r\n            </div>\r\n        );\r\n    };\r\n}","import React from \"react\";\r\nimport { Table, message, Row, Col, Tag, Button, Popconfirm, Icon } from \"antd\";\r\n\r\nexport default class ConnectorManager extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        connector: []\r\n    };\r\n\r\n    columns = [\r\n        {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (name, record) => {\r\n                return (<Tag key={name} onClick={() => {\r\n                }}>{name}</Tag>)\r\n            }\r\n        },\r\n        {\r\n            title: 'size',\r\n            dataIndex: 'size',\r\n            key: 'size'\r\n        },\r\n        {\r\n            title: 'loadTime',\r\n            dataIndex: 'loadTime',\r\n            key: 'loadTime'\r\n        },\r\n        {\r\n            title: 'action',\r\n            dataIndex: 'action',\r\n            key: 'action',\r\n            render: (name, record) => {\r\n                return (<Popconfirm\r\n                    title=\"Are you sure Delete this moudle?\"\r\n                    onConfirm={async () => {\r\n                        this.setState({ loading: true })\r\n                        await fetch(`/_sys/plugin/delete_module/?name=${record.name}`, { method: \"GET\" })\r\n                        this.fetchData();\r\n                    }}\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    placement=\"left\"\r\n                >\r\n                    <a href=\"#\" style={{ color: \"red\" }}>Delete</a>\r\n                </Popconfirm>)\r\n            }\r\n        }\r\n    ];\r\n\r\n\r\n    async fetchData() {\r\n        let result = await fetch(\"/_sys/plugin/list_modules\", {\r\n            method: \"GET\"\r\n        });\r\n\r\n        result = await result.json();\r\n        this.setState({\r\n            loading: false,\r\n            connector: result\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchData()\r\n    }\r\n\r\n    async reloadConnectors() {\r\n        this.setState({ loading: true })\r\n        await fetch(\"/_sys/plugin/reload\", { method: \"GET\" });\r\n        message.success(`reload success`);\r\n        this.fetchData();\r\n    }\r\n\r\n    render = () => {\r\n        const loadingIcon = () => {\r\n            if (!this.state.loading) {\r\n                return;\r\n            }\r\n            return (<Icon type=\"loading\" />)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Row style={{ margin: \"10px\" }}>\r\n                    <Col style={{ textAlign: 'right' }}>\r\n                        <Button type=\"primary\" icon=\"setting\" onClick={this.reloadConnectors.bind(this)}>Reload{loadingIcon()}</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Table dataSource={this.state.connector} columns={this.columns} expandedRowRender={record => {\r\n                    debugger\r\n                    return (<div>\r\n                        {\r\n                            record.drivers.map(x => {\r\n                                return (<Tag key={x} color={\"blue\"}> {x}</Tag>)\r\n                            })\r\n                        }\r\n                    </div>)\r\n                }} />\r\n            </div >\r\n        );\r\n    };\r\n}","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { Modal, Layout } from \"antd\";\r\nimport Menu from \"./Menu\";\r\nimport { WrappedNormalLoginForm } from \"./Login\";\r\nimport JobList from \"./JobList\";\r\nimport ServerLog from \"./ServerLog\";\r\nimport StreamingSql from \"./StreamingSql\";\r\nimport StreamingEtl from \"./StreamingEtl\";\r\nimport ConnectorList from \"./ConnectorList\";\r\nimport ConnectorManager from \"./ConnectorManager\";\r\n\r\n\r\nconst { Content } = Layout;\r\n\r\nexport default class App extends React.Component {\r\n\r\n  state = {\r\n    login: false,\r\n    loading: true,\r\n    userName: null\r\n  }\r\n\r\n  async login() {\r\n    let result = await fetch(\"/_sys/auth/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        userName: \"\",\r\n        password: \"\"\r\n      }),\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    });\r\n    result = await result.json();\r\n    if (result.success === false) {\r\n      this.setState({ login: false, loading: false })\r\n    } else {\r\n      this.setState({ userName: result.userName, login: true, loading: false })\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    Modal.confirm({\r\n      title: 'Do you Want to Logout this account?',\r\n      content: this.state.userName,\r\n      onOk: async () => {\r\n        let result = await fetch(\"/_sys/auth/logout\", { method: \"GET\" });\r\n        result = await result.json();\r\n        this.setState({ login: false })\r\n      },\r\n      onCancel: () => {\r\n        console.log('Cancel');\r\n      },\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.login()\r\n  }\r\n\r\n  render = () => {\r\n    if (this.state.loading) return (<span></span>)\r\n    if (this.state.login !== true) {\r\n      return (<WrappedNormalLoginForm afterLogin={(userName) => this.setState({ userName: userName, login: true })} />);\r\n    }\r\n    return (\r\n      <Layout style={{ minHeight: \"100vh\" }}>\r\n        <Menu logout={this.logout.bind(this)} />\r\n        <Layout>\r\n          <Content style={{ margin: \"16px 16px\", background: \"white\" }}>\r\n            <Route exact path=\"/\" component={JobList} />\r\n            <Route path=\"/joblist\" component={JobList} />\r\n            <Route path=\"/connectors\" component={ConnectorList} />\r\n            <Route path=\"/connector_manager\" component={ConnectorManager} />\r\n\r\n            <Route path=\"/serverLogs\" component={ServerLog} />\r\n            <Route path=\"/streamingSql/:jobId\" component={StreamingSql} />\r\n            <Route exact path=\"/streamingSql\" component={StreamingSql} />\r\n            <Route path=\"/streamingEtl\" component={StreamingEtl} />\r\n            <Route path=\"/abc\" component={() => <span>AAAAAA</span>} />\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Route path=\"/\" component={App} />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}